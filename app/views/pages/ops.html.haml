-content_for :scripts do
  :javascript
    window.setTimeout(function(){ window.location = window.location }, 5 * 60 * 1000);

    $(function() {
      $('#position-filter').change(function() {
        window.location = "#{request.path}?position_id=" + this.value;
      });
    });

    function drop(event, pool) {
      var url = event.dataTransfer.getData("employee_location");
      $.ajax({
        type: 'PUT',
        url: url,
        data: {employee: {pool: pool}},
        dataType: 'JSON',
      });

      window.location = window.location;
    }

    function allowDrop(ev) { ev.preventDefault(); }

    function drag(event, url) {
      event.dataTransfer.setData("employee_location", url);
    }

=render partial: 'position_count'
.opsboard
  .inactive-employee-space
    .card.employees-card
      .body
        %select#position-filter
          %option{value: ''} Show All
          -Position.alphabetical.map do |position|
            %option{value: position.id, "#{params[:position_id] == position.id.to_s ? 'selected' : 'notselected'}" => 'selected'}=position.name
        =link_to "Jobs", projects_path(status: 'inactive')
      -POOLS.each do |pool|
        .employee-pool{ondragover: "allowDrop(event)", ondrop: "drop(event, '#{pool}')"}
          .heading
            =pool
          .body
            -@employees.where(pool: pool).order('last_worked_on ASC').each do |employee|
              %li.employee{id: employee.id, draggable: 'true', ondragstart: "drag(event, '#{employee_path(employee)}')"}
                =link_to employee.name, employee
                -if !employee.alerts.blank?
                  %span.text-info (#{employee.alerts})
                -if !employee.last_worked_on.blank?
                  %span.text-info=employee.last_worked_on.to_s
                -employee.competencies.each do |comp|
                  =render partial: 'pages/tile', locals: {position: comp.position}

  .project-space
    -@projects.each do |project|
      .card.project-card
        .heading
          .pull-right
            =link_to "+", new_assignment_path(assignment: {project_id: project.id}, return_to: request.path), class: "add_employee_btn"
          =link_to project.to_s, edit_project_path(project)
        .body
          -project.assignments.each do |assignment|
            .line
              =render partial: 'pages/tile', locals: {position: assignment.position}
              =link_to assignment_path(assignment, return_to: request.path), {method: :delete, class: 'delete-assignment'} do
                &times;
              =link_to "#{assignment.employee.name}", edit_assignment_path(assignment, return_to: request.path)

